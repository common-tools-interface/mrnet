MRNET_VERSION  = @MRNET_VERSION@
MRNET_ROOT     = @MRNET_ROOT@
MRNET_PLATFORM = @host@
MRNET_STARTUP_METHOD = @MRNET_STARTUP_METHOD@

@SET_MAKE@

#############################
#### INSTALL DIRECTORIES ####
#############################

BINDIR  = ./bin/${MRNET_PLATFORM}
LIBDIR  = ./lib/${MRNET_PLATFORM}
OBJDIR  = ./obj/${MRNET_PLATFORM}
DEPENDDIR = ./depends
SRCDIR  = @abs_srcdir@
PREFIX  = @prefix@

prefix  = @prefix@
exec_prefix=@exec_prefix@
IBINDIR = @bindir@
ILIBDIR = @libdir@
IINCDIR = @includedir@

##########################
### AUXILIARY PROGRAMS ###
##########################
FLEX    = @FLEX@
BISON   = @YACC@
AR      = @AR@
ARFLAGS = @ARFLAGS@
RANLIB  = @RANLIB@
CP      = @CP@
RM      = @RM@
INSTALL = @INSTALL@
PURIFY  = @PURIFY@

#####################
# General Definitions
#####################

BUILD_SHARED_LIBS = @BUILDSHARED@

COMPILER_TYPE = @COMPILER_TYPE@

MRNET_OS = @MRNET_OS@

C_AS_CPLUSPLUS = @C_AS_CPLUSPLUS@

MAKEDEPENDS = $(SRCDIR)/conf/makedepends.sh

VPATH = $(SRCDIR)/src:$(SRCDIR)/tests:$(SRCDIR)/tests/test_Recovery

LDFLAGS = @LDFLAGS@
COMMNODE_LDFLAGS = @CN_LDFLAGS@
SOFLAGS = @SOFLAGS@

LIBS = $(LIBXPLAT) @LIBS@
LIBS_LIGHTWEIGHT = $(LIBXPLAT_LIGHTWEIGHT) @LIBS@

INCDIR = -I$(SRCDIR)/include -I$(SRCDIR)/src -I$(SRCDIR)/xplat/include -I$(SRCDIR)/tests
INCDIR_LIGHTWEIGHT = -I$(SRCDIR)/lightweight/include -I$(SRCDIR)/lightweight/src -I$(SRCDIR)/lightweight/xplat/include -I$(SRCDIR)/tests -I$(SRCDIR)/src

ifeq ($(COMPILER_TYPE), gnu)
    ifndef SILENCE_WARNINGS
    WARNFLAGS = -Wall \
                -W \
                -Wno-system-headers \
                -Wfloat-equal \
                -Wconversion \
                -Wshadow \
                -Wpointer-arith \
                -Wcast-qual \
                -Wcast-align \
                -Wwrite-strings \
                -Wsign-compare \
                -Wredundant-decls \
                -Wlong-long \
                -Woverloaded-virtual \
                -Wno-non-template-friend
   endif # SILENCE_WARNINGS
endif #GNU options

ifeq ($(COMPILER_TYPE), gnu)
    ifndef SILENCE_WARNINGS
    WARNFLAGS_LIGHTWEIGHT = -Wall \
                -W \
                -Wno-system-headers \
                -Wfloat-equal \
                -Wconversion \
                -Wshadow \
                -Wpointer-arith \
                -Wcast-qual \
                -Wcast-align \
                -Wwrite-strings \
                -Wsign-compare \
                -Wredundant-decls \
                -Wlong-long 
   endif # SILENCE_WARNINGS
endif #GNU options

ifeq ($(COMPILER_TYPE), forte)
    ifndef SILENCE_WARNINGS
        WARNFLAGS = +w +w2
    endif # SILENCE_WARNINGS
endif #Forte (Sun) compiler warnings

CXX = @CXX@
CC = @CC@
CXXFLAGS = @CXXFLAGS@ $(INCDIR) $(WARNFLAGS)
CCFLAGS = @CFLAGS@ $(INCDIR_LIGHTWEIGHT) $(WARNFLAGS_LIGHTWEIGHT)
TEST_CXXFLAGS := $(CXXFLAGS)
TEST_CCFLAGS := $(CCFLAGS)

# Check for older PGI compilers (before 6.0) that require 
# special handling for template libraries
PGI_OLD_TEMPLATES = @PGI_OLD_TEMPLATES@
ifeq ($(COMPILER_TYPE), pgi)
    ifeq ($(PGI_OLD_TEMPLATES), yes)
        CXXFLAGS += --one_instantiation_per_object
    endif
endif

export

#############################
# System Specific Definitions
#############################
LIBMRNET    = $(LIBDIR)/libmrnet.a
LIBMRNET_SO = $(LIBDIR)/libmrnet.so
LIBXPLAT    = $(MRNET_ROOT)/xplat/libxplat.a
LIBXPLAT_SO = $(MRNET_ROOT)/xplat/libxplat.so
LIBMRNET_LIGHTWEIGHT = $(MRNET_ROOT)/lightweight/libmrnet_lightweight.a
LIBMRNET_LIGHTWEIGHT_SO = $(MRNET_ROOT)/lightweight/libmrnet_lightweight.so
LIBXPLAT_LIGHTWEIGHT = $(MRNET_ROOT)/lightweight/xplat/libxplat_lightweight.a
LIBXPLAT_LIGHTWEIGHT_SO = $(MRNET_ROOT)/lightweight/xplat/libxplat_lightweight.so
COMMNODE    = $(BINDIR)/mrnet_commnode 
TOPGEN      = $(BINDIR)/mrnet_topgen

TARGETS     = $(LIBMRNET) $(COMMNODE) $(TOPGEN)
ifeq ($(BUILD_SHARED_LIBS), yes)
    TARGETS += $(LIBXPLAT_SO) $(LIBMRNET_SO)
    TARGETS += $(LIBXPLAT_LIGHTWEIGHT_SO) $(LIBMRNET_LIGHTWEIGHT_SO)
endif

STD_TESTS_FE = $(BINDIR)/test_basic_FE \
               $(BINDIR)/microbench_FE \
               $(BINDIR)/test_arrays_FE \
               $(BINDIR)/test_NativeFilters_FE \
               $(BINDIR)/test_DynamicFilters_FE \
               $(BINDIR)/test_MultStreams_FE

STD_TESTS_BE = $(BINDIR)/test_basic_BE  \
               $(BINDIR)/microbench_BE \
               $(BINDIR)/test_arrays_BE \
               $(BINDIR)/test_NativeFilters_BE \
               $(BINDIR)/test_DynamicFilters_BE \
               $(BINDIR)/test_MultStreams_BE

STD_TESTS_FE_LIGHTWEIGHT = $(BINDIR)/test_basic_FE_lightweight \
                           $(BINDIR)/test_arrays_FE_lightweight \
                           $(BINDIR)/test_MultStreams_FE_lightweight

STD_TESTS_BE_LIGHTWEIGHT = $(BINDIR)/test_basic_BE_lightweight \
                           $(BINDIR)/microbench_BE_lightweight \
                           $(BINDIR)/test_arrays_BE_lightweight \
                           $(BINDIR)/test_NativeFilters_BE_lightweight \
                           $(BINDIR)/test_DynamicFilters_BE_lightweight \
                           $(BINDIR)/test_MultStreams_BE_lightweight

STD_TESTS = ${STD_TESTS_FE} ${STD_TESTS_BE}

OPT_TESTS = $(BINDIR)/test_Recovery_FE \
	    $(BINDIR)/test_Recovery_BE

###################################
# Object and Executable Definitions
###################################
LIBMRNET_SRCS = \
	         $(OBJDIR)/scanner.C \
	         $(OBJDIR)/parser.tab.C \
	         $(SRCDIR)/src/BackEndNode.C \
	         $(SRCDIR)/src/byte_order.c \
	         $(SRCDIR)/src/ChildNode.C \
	         $(SRCDIR)/src/CommunicationNode.C \
	         $(SRCDIR)/src/Communicator.C \
	         $(SRCDIR)/src/DataElement.C \
	         $(SRCDIR)/src/Error.C \
	         $(SRCDIR)/src/Event.C \
	         $(SRCDIR)/src/EventDetector.C \
	         $(SRCDIR)/src/Filter.C \
	         $(SRCDIR)/src/FilterDefinitions.C \
	         $(SRCDIR)/src/FrontEndNode.C \
	         $(SRCDIR)/src/InternalNode.C \
	         $(SRCDIR)/src/Message.C \
	         $(SRCDIR)/src/Network.C \
	         $(SRCDIR)/src/NetworkTopology.C \
	         $(SRCDIR)/src/Packet.C \
	         $(SRCDIR)/src/ParsedGraph.C \
	         $(SRCDIR)/src/ParentNode.C \
	         $(SRCDIR)/src/pdr.c \
	         $(SRCDIR)/src/pdr_mem.c \
	         $(SRCDIR)/src/pdr_sizeof.c \
	         $(SRCDIR)/src/PeerNode.C \
	         $(SRCDIR)/src/PerfDataEvent.C \
	         $(SRCDIR)/src/Router.C \
	         $(SRCDIR)/src/SerialGraph.C \
	         $(SRCDIR)/src/Stream.C \
	         $(SRCDIR)/src/TimeKeeper.C \
	         $(SRCDIR)/src/Tree.C \
	         $(SRCDIR)/src/utils.C

ifeq ($(NEED_PARADYN_FILTERS), yes)
    CXXFLAGS += -D_NEED_PARADYN_FILTERS_
    LIBMRNET_SRCS += $(SRCDIR)/src/ParadynFilterDefinitions.C 
endif

ifeq ($(MRNET_OS), linux)
    LIBMRNET_SRCS += $(SRCDIR)/src/PerfDataSysEvent_linux.C
endif

ifeq ($(MRNET_STARTUP_METHOD),cray_xt)

# build for a Cray XT (uses aprun or alps_tool_helper for parallel process launch)
LIBMRNET_SRCS += $(SRCDIR)/src/XTNetwork.C \
                 $(SRCDIR)/src/XTFrontEndNode.C \
                 $(SRCDIR)/src/XTBackEndNode.C \
                 $(SRCDIR)/src/XTInternalNode.C

else
    ifeq ($(MRNET_STARTUP_METHOD),ssh)

# fall back to RSH instantiation approach
LIBMRNET_SRCS += $(SRCDIR)/src/RSHNetwork.C \
                 $(SRCDIR)/src/RSHParentNode.C \
                 $(SRCDIR)/src/RSHChildNode.C \
                 $(SRCDIR)/src/RSHFrontEndNode.C \
                 $(SRCDIR)/src/RSHBackEndNode.C \
                 $(SRCDIR)/src/RSHInternalNode.C

    else

$(error Unrecognized MRNet instantiation method "$(MRNET_STARTUP_METHOD)"; see configure --help for supported methods)
    endif
endif


LIBMRNET_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(LIBMRNET_SRCS)))))

COMMNODE_SRCS = $(SRCDIR)/src/CommunicationNodeMain.C
COMMNODE_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(COMMNODE_SRCS)))))

PDR_SRCS = $(SRCDIR)/src/pdr.c \
	   $(SRCDIR)/src/pdr_mem.c \
	   $(SRCDIR)/src/pdr_sizeof.c \
	   $(SRCDIR)/src/byte_order.c
PDR_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(PDR_SRCS)))))

ALL_SRCS = $(LIBMRNET_SRCS) $(COMMNODE_SRCS) $(TEST_SRCS)
DEPS	= $(addprefix $(DEPENDDIR)/, $(patsubst %.C,%.d,$(patsubst %.c,%.d,$(notdir $(ALL_SRCS)))))

all: xplat-all lightweight-all xplat_lightweight-all $(TARGETS)

xplat-all:
	cd ./xplat ; $(MAKE) all
	$(CP) $(LIBXPLAT) $(LIBDIR)/

xplat-sharedobj:
	cd ./xplat ; $(MAKE) sharedobj
	$(CP) $(LIBXPLAT_SO) $(LIBDIR)/

lightweight-all:
	cd ./lightweight ; $(MAKE) all
	$(CP) $(LIBMRNET_LIGHTWEIGHT) $(LIBDIR)/

lightweight-sharedobj:
	cd ./lightweight ; $(MAKE) sharedobj
	$(CP) $(LIBMRNET_LIGHTWEIGHT_SO) $(LIBDIR)/

xplat_lightweight-all:
	cd ./lightweight/xplat ; $(MAKE) all
	$(CP) $(LIBXPLAT_LIGHTWEIGHT) $(LIBDIR)/

xplat_lightweight-sharedobj:
	cd ./lightweight/xplat ; $(MAKE) sharedobj
	$(CP) $(LIBXPLAT_LIGHTWEIGHT_SO) $(LIBDIR)/

install: install-local xplat-install lightweight-install xplat_lightweight-install

install-local: all
	@echo Creating install directories
	for dir in $(IBINDIR) $(ILIBDIR) $(IINCDIR) $(IINCDIR)/mrnet ; do \
	    if [ ! -d $$dir ] ; then \
	        mkdir -p $$dir ; \
	        chmod 755 $$dir ; \
	    fi \
	done
	if [ ! -x `echo $(INSTALL) | sed 's/ .*$$//'` ] ; then \
	    chmod +x `echo $(INSTALL) | sed 's/ .*$$//'` ; \
	fi
	@echo Installing binaries
	$(INSTALL) -p -m 755 $(COMMNODE) $(BINDIR)/mrnet_topgen $(IBINDIR)/
	@echo Installing libraries
	$(INSTALL) -p -m 755 $(LIBMRNET) $(ILIBDIR)/
	if [ -f $(LIBMRNET_SO) ] ; then \
            $(INSTALL) -p -m 755 $(LIBMRNET_SO) $(ILIBDIR)/ ; \
	fi
	@echo Installing headers
	for hdr in @srcdir@/include/mrnet/*.h ; do \
	    $(INSTALL) -p -m 644 $$hdr $(IINCDIR)/mrnet/ ; \
	done

install-boost:
	@echo Creating install directory
	if [ ! -d $(IINCDIR)/boost ] ; then \
	    mkdir -p $(IINCDIR)/boost ; \
	    chmod 755 $(IINCDIR)/boost ; \
        fi
	@echo Installing headers
	$(CP) -a @srcdir@/include/boost/* $(IINCDIR)/boost/

install-tests: tests $(BINDIR)/mrnet_tests.sh
	@echo Installing standard tests
	$(INSTALL) -p -m 755 $(STD_TESTS) $(STD_TESTS_FE_LIGHTWEIGHT) $(STD_TESTS_BE_LIGHTWEIGHT) $(BINDIR)/mrnet_tests.sh  $(IBINDIR)/
	$(INSTALL) -p -m 755 $(LIBDIR)/test_DynamicFilters.so $(ILIBDIR)/
	$(INSTALL) -p -m 755 $(LIBDIR)/test_HeteroFilters.so $(ILIBDIR)/
	if [ ! -d $(IBINDIR)/topology_files ] ; then \
            mkdir -p $(IBINDIR)/topology_files ; \
	    chmod 755 $(IBINDIR)/topology_files ; \
	fi
	for top in $(SRCDIR)/tests/topology_files/local-*.top ; do \
	    $(INSTALL) -p -m 644 $$top $(IBINDIR)/topology_files/ ; \
	done

install-tests-opt: tests-opt
	@echo Installing optional tests
	$(INSTALL) -p -m 755 $(OPT_TESTS) $(IBINDIR)/
	$(INSTALL) -p -m 755 $(LIBDIR)/test_RecoveryFilter.so $(ILIBDIR)/

install-examples: examples
	$(MAKE) -C Examples install

xplat-install:
	@echo Installing xplat library
	cd ./xplat ; $(MAKE) install

lightweight-install:
	@echo Installing lightweight backend library
	cd ./lightweight ; $(MAKE) install

xplat_lightweight-install:
	@echo Installing xplat library for lightweight backend library
	cd ./lightweight/xplat ; $(MAKE) install

tests: all $(STD_TESTS) $(STD_TESTS_FE_LIGHTWEIGHT) $(STD_TESTS_BE_LIGHTWEIGHT) $(LIBDIR)/test_DynamicFilters.so $(LIBDIR)/test_HeteroFilters.so

tests-opt: $(OPT_TESTS)

examples: all
	$(MAKE) -C Examples

$(OBJDIR)/scanner.C: $(SRCDIR)/src/scanner.l $(OBJDIR)/parser.tab.C $(FRC)
	@echo Building `basename $@` ...
	if [ -f $@ ] ; then $(RM) $@ ; fi
	$(FLEX) -Pmrn -t $< > $@ 

$(OBJDIR)/parser.tab.C $(OBJDIR)/parser.tab.h: $(SRCDIR)/src/parser.y $(FRC)
	@echo Building `basename $@` ...
	$(BISON) -p mrn -d $<
	if [ -f $(OBJDIR)/parser.tab.C ] ; then $(RM) $(OBJDIR)/parser.tab.C ; fi
	mv y.tab.c $(OBJDIR)/parser.tab.C
	if [ -f $(OBJDIR)/parser.tab.h ] ; then $(RM) $(OBJDIR)/parser.tab.h ; fi 
	mv y.tab.h $(OBJDIR)/parser.tab.h

$(LIBMRNET): $(LIBMRNET_OBJS)
	@echo Archiving `basename $@` ...
	if [ "$(COMPILER_TYPE)" = "pgi" -a "$(PGI_OLD_TEMPLATES)" = "yes" ]; then \
	    $(CXX) $(CXXFLAGS) --prelink_objects $^ ; \
	    $(AR) $(ARFLAGS) $@ $^ Template.dir/*.o ; \
	else \
	    $(AR) $(ARFLAGS) $@ $^ ; \
	fi
	$(RANLIB) $@

$(LIBMRNET_SO): $(LIBMRNET_OBJS)
	@echo Building `basename $@` ...
	if [ "$(COMPILER_TYPE)" = "pgi" -a "$(PGI_OLD_TEMPLATES)" = "yes" ]; then \
	    $(CXX) $(CXXFLAGS) --prelink_objects $^ ; \
	    $(CXX) $(SOFLAGS) -o $@ $^ Template.dir/*.o ; \
	else \
	    $(CXX) $(SOFLAGS) -o $@ $^ ; \
	fi

$(LIBXPLAT): xplat-all

$(LIBXPLAT_SO): xplat-sharedobj

$(LIBMRNET_LIGHTWEIGHT): lightweight-all

$(LIBMRNET_LIGHTWEIGHT_SO): lightweight-sharedobj

$(LIBXPLAT_LIGHTWEIGHT): xplat_lightweight-all

$(LIBXPLAT_LIGHTWEIGHT_SO): xplat_lightweight-sharedobj

$(BINDIR)/mrnet_commnode: $(COMMNODE_OBJS) $(LIBMRNET) $(LIBXPLAT)
	@echo Linking `basename $@` ...
	$(PURIFY) $(CXX) $(CXXFLAGS) $(COMMNODE_LDFLAGS) -o $@ $(COMMNODE_OBJS) \
	   $(LIBMRNET) $(LIBS)

$(BINDIR)/mrnet_topgen: $(OBJDIR)/config_generator.o $(LIBMRNET) $(LIBXPLAT)
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/config_generator.o \
           $(LIBMRNET) $(LIBS)

$(STD_TESTS_FE): $(BINDIR)/%: $(LIBMRNET) $(OBJDIR)/test_common.o $(OBJDIR)/%.o \
              $(SRCDIR)/tests/test_common.h \
              $(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_common.o $(LIBMRNET) $(LIBS)

$(STD_TESTS_BE): $(BINDIR)/%: $(LIBMRNET) $(OBJDIR)/test_common.o $(OBJDIR)/%.o \
              $(SRCDIR)/tests/test_common.h \
              $(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(COMMNODE_LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_common.o $(LIBMRNET) $(LIBS)

$(STD_TESTS_FE_LIGHTWEIGHT): $(BINDIR)/%: $(LIBMRNET) $(OBJDIR)/test_common.o $(OBJDIR)/%.o \
              $(SRCDIR)/tests/test_common.h \
              $(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_common.o $(LIBMRNET) $(LIBS)

$(STD_TESTS_BE_LIGHTWEIGHT): $(BINDIR)/%: $(LIBMRNET_LIGHTWEIGHT) $(OBJDIR)/%.o \
				$(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CC) $(TEST_CCFLAGS) $(COMMNODE_LDFLAGS) -o $@ $(OBJDIR)/$*.o \
		$(LIBMRNET_LIGHTWEIGHT) $(LIBS_LIGHTWEIGHT)

$(OBJDIR)/microbench_BE_lightweight.o: microbench_BE_lightweight.c $(FRC)
	@echo Compiling microbench_BE_lightweight ...
	$(CC) $(TEST_CCFLAGS) -o $@ -c $<

$(BINDIR)/mrnet_tests.sh: $(SRCDIR)/conf/mrnet_tests.sh
	$(CP) $(SRCDIR)/conf/mrnet_tests.sh $(BINDIR)/


$(LIBDIR)/test_DynamicFilters.so: $(SRCDIR)/tests/test_DynamicFilters.C
	@echo "Building `basename $@` ..."
	$(CXX) $(CXXFLAGS) $(SOFLAGS) -o $@ $(SRCDIR)/tests/test_DynamicFilters.C

$(LIBDIR)/test_HeteroFilters.so: $(SRCDIR)/tests/test_HeteroFilters.C
	@echo "Building `basename $@` ..."
	$(CXX) $(CXXFLAGS) $(SOFLAGS) -o $@ $(SRCDIR)/tests/test_HeteroFilters.C

$(BINDIR)/test_Recovery_FE: $(BINDIR)/%: $(LIBMRNET) \
                            $(OBJDIR)/%.o \
                            $(OBJDIR)/test_Recovery.o \
                            $(OBJDIR)/ThroughputExperiment.o \
                            $(OBJDIR)/test_Recovery_aux.o \
                            $(LIBDIR)/test_RecoveryFilter.so
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_Recovery.o $(OBJDIR)/test_Recovery_aux.o \
           $(OBJDIR)/ThroughputExperiment.o $(LIBMRNET) $(LIBS)

$(BINDIR)/test_Recovery_BE: $(BINDIR)/%: $(LIBMRNET) \
                            $(OBJDIR)/%.o \
                            $(OBJDIR)/ThroughputExperiment.o \
                            $(OBJDIR)/test_Recovery.o
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(COMMNODE_LDFLAGS) -o $@ $(OBJDIR)/$*.o \
           $(OBJDIR)/ThroughputExperiment.o \
           $(OBJDIR)/test_Recovery.o $(LIBMRNET) $(LIBS)

$(LIBDIR)/test_RecoveryFilter.so: $(SRCDIR)/tests/test_Recovery/test_RecoveryFilter.C
	@echo "Building `basename $@` ..."
	$(CXX) $(CXXFLAGS) $(SOFLAGS) -o $@ $(SRCDIR)/tests/test_Recovery/test_RecoveryFilter.C

$(BINDIR)/pdr_test: $(PDR_OBJS) tests/xdr_test.c
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -Itests -o $@ $(PDR_OBJS) tests/pdr_test.c $(LIBS)

$(BINDIR)/xdr_test: tests/xdr_test.c
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -Itests -o $@ -DUSE_XDR tests/xdr_test.c $(LIBS)


#################################
# Cleaning rules
#################################
clean: local-clean xplat-clean lightweight-clean xplat_lightweight-clean

local-clean:
	@echo Cleaning $(MRNET_PLATFORM) platform ...
	for file in $(BINDIR)/* $(LIBDIR)/* $(OBJDIR)/* ; do \
	    if [ -f $$file ] ; then $(RM) $$file ; fi \
	done
	if [ -d Template.dir ] ; then $(RM) -r Template.dir ; fi
	for file in `find $(MRNET_ROOT) -name "*.ti" -print` ; do $(RM) $$file ; done

xplat-clean:
	@echo Cleaning xplat library
	cd ./xplat ; $(MAKE) clean

lightweight-clean:
	@echo Cleaning lightweight back-end library
	cd ./lightweight ; $(MAKE) clean

xplat_lightweight-clean:
	@echo Cleaning xplat for lightweight back-end library
	cd ./lightweight/xplat ; $(MAKE) clean

CLEAN: local-CLEAN xplat-clean lightweight-clean xplat_lightweight-clean

local-CLEAN: local-clean
	@echo Cleaning all platforms ...
	for dir in $(DEPENDDIR) bin lib obj ; do \
	    if [ -d $$dir ] ; then $(RM) -r $$dir ; fi \
	done
	for file in `find $(MRNET_ROOT) -name "*~" -print` ; do $(RM) $$file ; done

distclean: local-distclean xplat-distclean lightweight-distclean xplat_lightweight-distclean

local-distclean: local-CLEAN
	for file in config.* src/config.h Makefile Examples/Makefile ; do  \
	    if [ -f $$file ] ; then $(RM) $$file ; fi \
	done
	if [ -d autom4te.cache ] ; then $(RM) -r autom4te.cache ; fi

xplat-distclean:
	@echo "Cleaning xplat library (distclean)"
	cd ./xplat ; $(MAKE) distclean

lightweight-distclean:
	@echo "Cleaning lightweight back-end library (distclean)"
	cd ./lightweight ; $(MAKE) distclean

xplat_lightweight-distclean:
	@echo "Cleaning xplat for lightweight back-end library (distclean)"
	cd ./lightweight/xplat ; $(MAKE) distclean


#################################
# Default Build rules
#################################
@VERBOSEMAKE@
.SUFFIXES:
.SUFFIXES: .c .C .o .d

$(OBJDIR)/test_%.o: test_%.c $(FRC)
	@echo Compiling `basename $@` ...
	$(CC) $(TEST_CCFLAGS) -o $@ -c $<

$(OBJDIR)/test_%.o: test_%.C $(FRC)
	@echo Compiling `basename $@` ...
	$(CXX) $(TEST_CXXFLAGS) -o $@ -c $<

$(OBJDIR)/%.o: %.c $(FRC)
	@echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) $(C_AS_CPLUSPLUS) -o $@ -c $<

$(OBJDIR)/%.o: %.C $(FRC)
	@echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(DEPENDDIR)/%.d: %.c $(FRC)
	@echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCDIR) 

$(DEPENDDIR)/%.d: %.C $(FRC)
	@echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCDIR) 

-include $(DEPS)

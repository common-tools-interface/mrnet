#/****************************************************************************
# * Copyright Â© 2003-2011 Dorian C. Arnold, Philip C. Roth, Barton P. Miller *
# *                  Detailed MRNet usage rights in "LICENSE" file.          *
# ****************************************************************************/

MRNET_VERSION  = @MRNET_VERSION@
MRNET_ROOT     = @MRNET_ROOT@
MRNET_PLATFORM = @host@
MRNET_STARTUP_METHOD = @MRNET_STARTUP_METHOD@

@SET_MAKE@

#############################
#### INSTALL DIRECTORIES ####
#############################

PLATDIR = @PLATFORM_BUILD@
BINDIR  = $(PLATDIR)/bin
LIBDIR  = $(PLATDIR)/lib
OBJDIR  = $(PLATDIR)/obj
DEPDIR  = $(PLATDIR)/depends

BASEDIR  = $(MRNET_ROOT)
INCDIR   = $(BASEDIR)/include
SRCDIR   = $(BASEDIR)/src
TSTDIR   = $(BASEDIR)/tests
XPLATDIR = $(BASEDIR)/xplat
EXTDIR   = $(BASEDIR)/external
BUILDDIR = $(BASEDIR)/build

prefix      = @prefix@
exec_prefix = @exec_prefix@
IBINDIR     = @bindir@
ILIBDIR     = @libdir@
IINCDIR     = @includedir@

mrnet_incdir   = $(INCDIR)/mrnet
install_incdir = $(IINCDIR)/mrnet

##########################
### AUXILIARY PROGRAMS ###
##########################
FLEX    = @FLEX@
BISON   = @YACC@
AR      = @AR@
ARFLAGS = @ARFLAGS@
RANLIB  = @RANLIB@
CP      = @CP@
RM      = @RM@
INSTALL = @INSTALL@
PURIFY  = @PURIFY@
MKDIR_P = mkdir -p

#####################
# General Definitions
#####################

BUILD_SHARED_LIBS = @BUILDSHARED@

COMPILER_TYPE = @COMPILER_TYPE@

MRNET_OS = @MRNET_OS@

C_AS_CPLUSPLUS = @C_AS_CPLUSPLUS@

MAKEDEPENDS = $(BASEDIR)/conf/makedepends.sh

VPATH = $(SRCDIR):$(TSTDIR):$(TSTDIR)/test_Recovery

LDFLAGS = @LDFLAGS@
COMMNODE_LDFLAGS = @CN_LDFLAGS@
SOFLAGS = @SOFLAGS@

LIBS = @LIBS@ @EXTRA_LIBS@
LIBS_LIGHTWEIGHT = @LIBS_LIGHTWEIGHT@ @EXTRA_LIBS@

COMMON_INCLUDES = -I$(INCDIR) -I$(XPLATDIR)/include -I$(TSTDIR) -I$(PLATDIR) -I$(SRCDIR) 
INCLUDES = $(COMMON_INCLUDES)

HAVE_SYSTEM_BOOST = @HAVE_SYSTEM_BOOST@
HAVE_USER_BOOST   = @HAVE_USER_BOOST@
ifeq ($(HAVE_USER_BOOST), yes)
    INCLUDES += -I@BOOST_INCDIR@
else
    ifeq ($(HAVE_SYSTEM_BOOST), no)
        INCLUDES += -I$(EXTDIR)/boost/include
    endif
endif

INCLUDES_LIGHTWEIGHT = $(COMMON_INCLUDES) -I$(SRCDIR)/lightweight

ifeq ($(COMPILER_TYPE), gnu)
    ifndef SILENCE_WARNINGS
    WARNFLAGS = -Wall \
                -W \
                -Wno-system-headers \
                -Wfloat-equal \
                -Wconversion \
                -Wshadow \
                -Wpointer-arith \
                -Wcast-qual \
                -Wcast-align \
                -Wwrite-strings \
                -Wsign-compare \
                -Wredundant-decls \
                -Wlong-long \
                -Woverloaded-virtual \
                -Wno-non-template-friend
    WARNFLAGS_LIGHTWEIGHT = -Wall \
                -W \
                -Wno-system-headers \
                -Wfloat-equal \
                -Wconversion \
                -Wshadow \
                -Wpointer-arith \
                -Wcast-qual \
                -Wcast-align \
                -Wwrite-strings \
                -Wsign-compare \
                -Wredundant-decls \
                -Wlong-long 
   endif # SILENCE_WARNINGS
endif #GNU options

ifeq ($(COMPILER_TYPE), forte)
    ifndef SILENCE_WARNINGS
        WARNFLAGS = +w +w2
    endif # SILENCE_WARNINGS
endif #Forte (Sun) compiler warnings

CXX = @CXX@
CC = @CC@
CXXFLAGS = @CXXFLAGS@ $(INCLUDES) $(WARNFLAGS)
CCFLAGS = @CFLAGS@ $(INCLUDES_LIGHTWEIGHT) $(WARNFLAGS_LIGHTWEIGHT)
TEST_CXXFLAGS := $(CXXFLAGS)
TEST_CCFLAGS := $(CCFLAGS)

# Check for older PGI compilers (before 6.0) that require 
# special handling for template libraries
PGI_OLD_TEMPLATES = @PGI_OLD_TEMPLATES@
ifeq ($(COMPILER_TYPE), pgi)
    ifeq ($(PGI_OLD_TEMPLATES), yes)
        CXXFLAGS += --one_instantiation_per_object
    endif
endif

export

#############################
# System Specific Definitions
#############################
COMMNODE    = $(BINDIR)/mrnet_commnode 
TOPGEN      = $(BINDIR)/mrnet_topgen

LIBMRNET    = $(LIBDIR)/libmrnet.a
LIBMRNET_SO = $(LIBDIR)/libmrnet.so
LIBMRNET_SO_DEPLIBS = -L$(LIBDIR) -lxplat $(LIBS)

LIBMRNET_LIGHTWEIGHT    = $(LIBDIR)/libmrnet_lightweight.a
LIBMRNET_LIGHTWEIGHT_SO = $(LIBDIR)/libmrnet_lightweight.so
LIBMRNET_LIGHTWEIGHT_SO_DEPLIBS = -L$(LIBDIR) -lxplat_lightweight $(LIBS_LIGHTWEIGHT)

LIBXPLAT    = $(LIBDIR)/libxplat.a
LIBXPLAT_SO = $(LIBDIR)/libxplat.so

LIBXPLAT_LIGHTWEIGHT    = $(LIBDIR)/libxplat_lightweight.a
LIBXPLAT_LIGHTWEIGHT_SO = $(LIBDIR)/libxplat_lightweight.so

TARGETS = $(LIBXPLAT) $(LIBXPLAT_LIGHTWEIGHT) $(LIBMRNET) $(LIBMRNET_LIGHTWEIGHT) $(COMMNODE) $(TOPGEN)
ifeq ($(BUILD_SHARED_LIBS), yes)
    TARGETS += $(LIBXPLAT_SO) $(LIBMRNET_SO)
    TARGETS += $(LIBXPLAT_LIGHTWEIGHT_SO) $(LIBMRNET_LIGHTWEIGHT_SO)
endif


STD_TESTS_FE = $(BINDIR)/test_basic_FE \
               $(BINDIR)/microbench_FE \
               $(BINDIR)/singlecast_FE \
               $(BINDIR)/test_arrays_FE \
               $(BINDIR)/test_NativeFilters_FE \
               $(BINDIR)/test_DynamicFilters_FE \
               $(BINDIR)/test_MultStreams_FE

STD_TESTS_BE = $(BINDIR)/test_basic_BE  \
               $(BINDIR)/microbench_BE \
               $(BINDIR)/singlecast_BE \
               $(BINDIR)/test_arrays_BE \
               $(BINDIR)/test_NativeFilters_BE \
               $(BINDIR)/test_DynamicFilters_BE \
               $(BINDIR)/test_MultStreams_BE

STD_TESTS_FE_LIGHTWEIGHT = $(BINDIR)/test_basic_FE_lightweight \
                           $(BINDIR)/test_arrays_FE_lightweight \
                           $(BINDIR)/test_MultStreams_FE_lightweight

STD_TESTS_BE_LIGHTWEIGHT = $(BINDIR)/test_basic_BE_lightweight \
                           $(BINDIR)/microbench_BE_lightweight \
                           $(BINDIR)/singlecast_BE_lightweight \
                           $(BINDIR)/test_arrays_BE_lightweight \
                           $(BINDIR)/test_NativeFilters_BE_lightweight \
                           $(BINDIR)/test_DynamicFilters_BE_lightweight \
                           $(BINDIR)/test_MultStreams_BE_lightweight

STD_TESTS = ${STD_TESTS_FE} ${STD_TESTS_BE}

OPT_TESTS = $(BINDIR)/test_Recovery_FE \
	    $(BINDIR)/test_Recovery_BE

###################################
# Object and Executable Definitions
###################################
LIBMRNET_SRCS = \
	         $(SRCDIR)/scanner.C \
	         $(SRCDIR)/parser.tab.C \
	         $(SRCDIR)/BackEndNode.C \
	         $(SRCDIR)/byte_order.c \
	         $(SRCDIR)/ChildNode.C \
	         $(SRCDIR)/CommunicationNode.C \
	         $(SRCDIR)/Communicator.C \
	         $(SRCDIR)/DataElement.C \
	         $(SRCDIR)/Error.C \
	         $(SRCDIR)/Event.C \
	         $(SRCDIR)/EventDetector.C \
	         $(SRCDIR)/Filter.C \
	         $(SRCDIR)/FilterDefinitions.C \
	         $(SRCDIR)/FrontEndNode.C \
	         $(SRCDIR)/InternalNode.C \
	         $(SRCDIR)/Message.C \
	         $(SRCDIR)/Network.C \
	         $(SRCDIR)/NetworkTopology.C \
	         $(SRCDIR)/Packet.C \
	         $(SRCDIR)/ParsedGraph.C \
	         $(SRCDIR)/ParentNode.C \
	         $(SRCDIR)/pdr.c \
	         $(SRCDIR)/pdr_mem.c \
	         $(SRCDIR)/pdr_sizeof.c \
	         $(SRCDIR)/PeerNode.C \
	         $(SRCDIR)/PerfDataEvent.C \
	         $(SRCDIR)/Router.C \
	         $(SRCDIR)/SerialGraph.C \
	         $(SRCDIR)/Stream.C \
	         $(SRCDIR)/TimeKeeper.C \
	         $(SRCDIR)/Tree.C \
	         $(SRCDIR)/utils.C

LIBMRNET_HEADERS = $(wildcard $(mrnet_incdir)/*.h)
INSTALL_HEADERS = $(addprefix $(install_incdir)/, $(notdir $(LIBMRNET_HEADERS)))

ifeq ($(NEED_PARADYN_FILTERS), yes)
    CXXFLAGS += -D_NEED_PARADYN_FILTERS_
    LIBMRNET_SRCS += $(SRCDIR)/ParadynFilterDefinitions.C 
endif

ifeq ($(MRNET_OS), linux)
    LIBMRNET_SRCS += $(SRCDIR)/PerfDataSysEvent_linux.C
else
    LIBMRNET_SRCS += $(SRCDIR)/PerfDataSysEvent_none.C
endif

ifeq ($(MRNET_STARTUP_METHOD),cray_xt)

# build for a Cray XT (uses aprun or alps_tool_helper for parallel process launch)
LIBMRNET_SRCS += $(SRCDIR)/XTNetwork.C \
                 $(SRCDIR)/XTFrontEndNode.C \
                 $(SRCDIR)/XTBackEndNode.C \
                 $(SRCDIR)/XTInternalNode.C

else
    ifeq ($(MRNET_STARTUP_METHOD),ssh)

# fall back to RSH instantiation approach
LIBMRNET_SRCS += $(SRCDIR)/RSHNetwork.C \
                 $(SRCDIR)/RSHParentNode.C \
                 $(SRCDIR)/RSHChildNode.C \
                 $(SRCDIR)/RSHFrontEndNode.C \
                 $(SRCDIR)/RSHBackEndNode.C \
                 $(SRCDIR)/RSHInternalNode.C

    else

$(error Unrecognized MRNet instantiation method "$(MRNET_STARTUP_METHOD)"; see configure --help for supported methods)
    endif
endif


LIBMRNET_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(LIBMRNET_SRCS)))))

COMMNODE_SRCS = $(SRCDIR)/CommunicationNodeMain.C
COMMNODE_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(COMMNODE_SRCS)))))

PDR_SRCS = $(SRCDIR)/pdr.c \
	   $(SRCDIR)/pdr_mem.c \
	   $(SRCDIR)/pdr_sizeof.c \
	   $(SRCDIR)/byte_order.c
PDR_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(PDR_SRCS)))))

ALL_SRCS = $(LIBMRNET_SRCS) $(COMMNODE_SRCS) $(TEST_SRCS)
DEPS	= $(addprefix $(DEPDIR)/, $(patsubst %.C,%.d,$(patsubst %.c,%.d,$(notdir $(ALL_SRCS)))))

all: $(TARGETS)

xplat-all:
	$(MAKE) -f $(PLATDIR)/Makefile.xplat all

xplat-sharedobj:
	$(MAKE) -f $(PLATDIR)/Makefile.xplat sharedobj

xplat_lightweight-all:
	$(MAKE) -f $(PLATDIR)/Makefile.xplat_ltwt all

xplat_lightweight-sharedobj:
	$(MAKE) -f $(PLATDIR)/Makefile.xplat_ltwt sharedobj

lightweight-all:
	$(MAKE) -f $(PLATDIR)/Makefile.ltwt all

lightweight-sharedobj:
	$(MAKE) -f $(PLATDIR)/Makefile.ltwt sharedobj

install: install-prep install-local lightweight-install xplat-install xplat_lightweight-install

install-prep:
	@echo Creating install directories
	for dir in $(IBINDIR) $(ILIBDIR) $(install_incdir) ; do \
	    if [ ! -d $$dir ] ; then \
	        $(MKDIR_P) $$dir ; \
	        chmod 755 $$dir ; \
	    fi \
	done
	if [ ! -x `echo $(INSTALL) | sed 's/ .*$$//'` ] ; then \
	    chmod +x `echo $(INSTALL) | sed 's/ .*$$//'` ; \
	fi

$(INSTALL_HEADERS): $(install_incdir)/%: $(mrnet_incdir)/%
	@echo Installing MRNet header $(<F)
	$(INSTALL) -m 644 $< $(@D)

install-local: all $(INSTALL_HEADERS) install-boost
	@echo Installing MRNet binaries
	$(INSTALL) -m 755 $(COMMNODE) $(BINDIR)/mrnet_topgen $(IBINDIR)/
	@echo Installing MRNet libraries
	$(INSTALL) -m 755 $(LIBMRNET) $(ILIBDIR)/
	if [ -f $(LIBMRNET_SO) ] ; then \
            $(INSTALL) -m 755 $(LIBMRNET_SO) $(ILIBDIR)/ ; \
	fi

install-boost:
	@if [ "$(HAVE_SYSTEM_BOOST)" = "no" -a "$(HAVE_USER_BOOST)" = "no" ]; then \
	    echo "Boost not found on system - installing" ; \
	    if [ ! -d $(IINCDIR)/boost ] ; then \
	        echo Creating Boost install directory $(IINCDIR)/boost ; \
	        $(MKDIR_P) $(IINCDIR)/boost ; \
	        chmod 755 $(IINCDIR)/boost ; \
	        echo Installing Boost headers ; \
	        $(CP) -a $(EXTDIR)/boost/include/boost/* $(IINCDIR)/boost/ ; \
	    else \
	        echo NOTE: install directory $(IINCDIR)/boost exists, not overwriting files ; \
            fi ; \
	else \
	    echo "Boost found on system - not installing" ; \
	fi

install-tests: tests $(BINDIR)/mrnet_tests.sh
	@echo Installing standard tests
	$(INSTALL) -m 755 $(STD_TESTS) $(STD_TESTS_FE_LIGHTWEIGHT) $(STD_TESTS_BE_LIGHTWEIGHT) $(BINDIR)/mrnet_tests.sh  $(IBINDIR)/
	$(INSTALL) -m 755 $(LIBDIR)/test_DynamicFilters.so $(ILIBDIR)/
	if [ ! -d $(IBINDIR)/topology_files ] ; then \
            $(MKDIR_P) $(IBINDIR)/topology_files ; \
	    chmod 755 $(IBINDIR)/topology_files ; \
	fi
	for top in $(TSTDIR)/topology_files/local-*.top ; do \
	    $(INSTALL) -m 644 $$top $(IBINDIR)/topology_files/ ; \
	done

install-tests-opt: tests-opt
	@echo Installing optional tests
	$(INSTALL) -m 755 $(OPT_TESTS) $(IBINDIR)/
	$(INSTALL) -m 755 $(LIBDIR)/test_RecoveryFilter.so $(ILIBDIR)/

install-examples: examples
	$(MAKE) -f $(PLATDIR)/Makefile.examples install

xplat-install:
	$(MAKE) -f $(PLATDIR)/Makefile.xplat install

lightweight-install:
	$(MAKE) -f $(PLATDIR)/Makefile.ltwt install

xplat_lightweight-install:
	$(MAKE) -f $(PLATDIR)/Makefile.xplat_ltwt install

tests: all $(STD_TESTS) $(STD_TESTS_FE_LIGHTWEIGHT) $(STD_TESTS_BE_LIGHTWEIGHT) $(LIBDIR)/test_DynamicFilters.so

tests-opt: $(OPT_TESTS)

examples: all
	$(MAKE) -f $(PLATDIR)/Makefile.examples 

$(SRCDIR)/scanner.C: $(SRCDIR)/scanner.l $(SRCDIR)/parser.tab.C
	@echo Building `basename $@` ...
	if [ -f $@ ] ; then $(RM) $@ ; fi
	$(FLEX) -Pmrn -t $< > $@ 

$(SRCDIR)/parser.tab.C $(SRCDIR)/parser.tab.h: $(SRCDIR)/parser.y
	@echo Building `basename $@` ...
	$(BISON) -p mrn -d $<
	if [ -f $(SRCDIR)/parser.tab.C ] ; then $(RM) $(SRCDIR)/parser.tab.C ; fi
	mv y.tab.c $(SRCDIR)/parser.tab.C
	if [ -f $(SRCDIR)/parser.tab.h ] ; then $(RM) $(SRCDIR)/parser.tab.h ; fi 
	mv y.tab.h $(SRCDIR)/parser.tab.h

$(LIBMRNET): $(LIBMRNET_OBJS)
	@echo Archiving `basename $@` ...
	if [ "$(COMPILER_TYPE)" = "pgi" -a "$(PGI_OLD_TEMPLATES)" = "yes" ]; then \
	    $(CXX) $(CXXFLAGS) --prelink_objects $^ ; \
	    $(AR) $(ARFLAGS) $@ $(LIBMRNET_OBJS) Template.dir/*.o ; \
	    $(RM) -r Template.dir ; \
	else \
	    $(AR) $(ARFLAGS) $@ $(LIBMRNET_OBJS)  ; \
	fi
	$(RANLIB) $@

$(LIBMRNET_SO): $(LIBMRNET_OBJS) $(LIBXPLAT_SO)
	@echo Building `basename $@` ...
	if [ "$(COMPILER_TYPE)" = "pgi" -a "$(PGI_OLD_TEMPLATES)" = "yes" ]; then \
	    $(CXX) $(CXXFLAGS) --prelink_objects $^ ; \
	    $(CXX) $(SOFLAGS) -o $@  $(LIBMRNET_OBJS) Template.dir/*.o $(LIBMRNET_SO_DEPLIBS) ; \
	    $(RM) -r Template.dir ; \
	else \
	    $(CXX) $(SOFLAGS) -o $@ $(LIBMRNET_OBJS) $(LIBMRNET_SO_DEPLIBS) ; \
	fi

$(LIBXPLAT): xplat-all

$(LIBXPLAT_SO): xplat-sharedobj

$(LIBMRNET_LIGHTWEIGHT): lightweight-all

$(LIBMRNET_LIGHTWEIGHT_SO): lightweight-sharedobj

$(LIBXPLAT_LIGHTWEIGHT): xplat_lightweight-all

$(LIBXPLAT_LIGHTWEIGHT_SO): xplat_lightweight-sharedobj

$(COMMNODE): $(COMMNODE_OBJS) $(LIBMRNET) $(LIBXPLAT)
	@echo Linking `basename $@` ...
	$(PURIFY) $(CXX) $(CXXFLAGS) $(COMMNODE_LDFLAGS) -o $@ $(COMMNODE_OBJS) \
	   $(LIBMRNET) $(LIBXPLAT) $(LIBS)

$(TOPGEN): $(OBJDIR)/config_generator.o $(LIBMRNET) $(LIBXPLAT)
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -o $@ $(OBJDIR)/config_generator.o \
           $(LIBMRNET) $(LIBXPLAT) $(LIBS)

$(STD_TESTS_FE): $(BINDIR)/%: $(LIBMRNET) $(OBJDIR)/test_common.o $(OBJDIR)/%.o \
              $(TSTDIR)/test_common.h \
              $(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_common.o $(LIBMRNET) $(LIBXPLAT) $(LIBS)

$(STD_TESTS_BE): $(BINDIR)/%: $(LIBMRNET) $(OBJDIR)/test_common.o $(OBJDIR)/%.o \
              $(TSTDIR)/test_common.h \
              $(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(COMMNODE_LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_common.o $(LIBMRNET) $(LIBXPLAT) $(LIBS)

$(STD_TESTS_FE_LIGHTWEIGHT): $(BINDIR)/%: $(LIBMRNET) $(OBJDIR)/test_common.o $(OBJDIR)/%.o \
              $(TSTDIR)/test_common.h \
              $(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_common.o $(LIBMRNET) $(LIBXPLAT) $(LIBS)

$(STD_TESTS_BE_LIGHTWEIGHT): $(BINDIR)/%: $(LIBMRNET_LIGHTWEIGHT) $(OBJDIR)/%.o \
				$(BINDIR)/mrnet_tests.sh
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CC) $(TEST_CCFLAGS) $(COMMNODE_LDFLAGS) -o $@ $(OBJDIR)/$*.o \
		$(LIBMRNET_LIGHTWEIGHT) $(LIBXPLAT_LIGHTWEIGHT) $(LIBS_LIGHTWEIGHT)

$(BINDIR)/mrnet_tests.sh: $(BASEDIR)/conf/mrnet_tests.sh
	$(CP) $(BASEDIR)/conf/mrnet_tests.sh $(BINDIR)/


$(LIBDIR)/test_DynamicFilters.so: $(TSTDIR)/test_DynamicFilters.C
	@echo "Building `basename $@` ..."
	$(CXX) $(CXXFLAGS) $(SOFLAGS) -o $@ $(TSTDIR)/test_DynamicFilters.C

$(BINDIR)/test_Recovery_FE: $(BINDIR)/%: $(LIBMRNET) \
                            $(OBJDIR)/%.o \
                            $(OBJDIR)/test_Recovery.o \
                            $(OBJDIR)/ThroughputExperiment.o \
                            $(OBJDIR)/test_Recovery_aux.o \
                            $(LIBDIR)/test_RecoveryFilter.so
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/$*.o \
	   $(OBJDIR)/test_Recovery.o $(OBJDIR)/test_Recovery_aux.o \
           $(OBJDIR)/ThroughputExperiment.o $(LIBMRNET) $(LIBXPLAT) $(LIBS)

$(BINDIR)/test_Recovery_BE: $(BINDIR)/%: $(LIBMRNET) \
                            $(OBJDIR)/%.o \
                            $(OBJDIR)/ThroughputExperiment.o \
                            $(OBJDIR)/test_Recovery.o
	@echo "Linking `basename $*` ..."
	$(PURIFY) $(CXX) $(TEST_CXXFLAGS) $(COMMNODE_LDFLAGS) -o $@ $(OBJDIR)/$*.o \
           $(OBJDIR)/ThroughputExperiment.o \
           $(OBJDIR)/test_Recovery.o $(LIBMRNET) $(LIBXPLAT) $(LIBS)

$(LIBDIR)/test_RecoveryFilter.so: $(TSTDIR)/test_Recovery/test_RecoveryFilter.C
	@echo "Building `basename $@` ..."
	$(CXX) $(CXXFLAGS) $(SOFLAGS) -o $@ $(TSTDIR)/test_Recovery/test_RecoveryFilter.C

$(BINDIR)/pdr_test: $(PDR_OBJS) tests/xdr_test.c
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -Itests -o $@ $(PDR_OBJS) tests/pdr_test.c $(LIBS)

$(BINDIR)/xdr_test: tests/xdr_test.c
	@echo "Linking `basename $@` ..."
	$(PURIFY) $(CXX) $(CXXFLAGS) -Itests -o $@ -DUSE_XDR tests/xdr_test.c $(LIBS)


#################################
# Cleaning rules
#################################
clean: local-clean xplat-clean

local-clean: examples-clean lightweight-clean
	@echo Cleaning $(MRNET_PLATFORM) platform ...
	for file in $(DEPS) $(OBJDIR)/*.o $(BINDIR)/* $(LIBMRNET) $(LIBMRNET_SO) $(LIBDIR)/test_DynamicFilters.so ; do \
	    if [ -f $$file ] ; then $(RM) $$file ; fi \
	done
	for file in `find $(BASEDIR) -name "*.ti" -print` ; do $(RM) $$file ; done

lightweight-clean:
	@echo Cleaning lightweight back-end library
	$(MAKE) -f $(PLATDIR)/Makefile.ltwt clean

xplat-clean: xplat_lightweight-clean
	@echo Cleaning xplat library
	$(MAKE) -f $(PLATDIR)/Makefile.xplat clean

xplat_lightweight-clean:
	@echo Cleaning xplat for lightweight back-end library
	$(MAKE) -f $(PLATDIR)/Makefile.xplat_ltwt clean

examples-clean:
	$(MAKE) -f $(PLATDIR)/Makefile.examples clean

#################################
# Default Build rules
#################################
@VERBOSEMAKE@
.SUFFIXES:
.SUFFIXES: .c .C .o .d

$(OBJDIR)/%_BE_lightweight.o: %_BE_lightweight.c $(FRC)
	@echo Compiling `basename $@` ...
	$(CC) $(TEST_CCFLAGS) -o $@ -c $<

$(OBJDIR)/test_%.o: test_%.c $(FRC)
	@echo Compiling `basename $@` ...
	$(CC) $(TEST_CCFLAGS) -o $@ -c $<

$(OBJDIR)/test_%.o: test_%.C $(FRC)
	@echo Compiling `basename $@` ...
	$(CXX) $(TEST_CXXFLAGS) -o $@ -c $<

$(OBJDIR)/%.o: %.c $(FRC)
	@echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) $(C_AS_CPLUSPLUS) -o $@ -c $<

$(OBJDIR)/%.o: %.C $(FRC)
	@echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(DEPDIR)/%.d: %.c $(FRC)
	@echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCLUDES) 

$(DEPDIR)/%.d: %.C $(FRC)
	@echo Building Depends File `basename $@` ...
	$(MAKEDEPENDS)  $< $(OBJDIR)/$*.o $@ $(INCLUDES) 

-include $(DEPS)

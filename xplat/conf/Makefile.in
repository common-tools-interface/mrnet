#/****************************************************************************
# * Copyright © 2003-2011 Dorian C. Arnold, Philip C. Roth, Barton P. Miller *
# *                  Detailed MRNet usage rights in "LICENSE" file.          *
# ****************************************************************************/
# $Id: Makefile.in,v 1.14 2008/10/09 19:50:12 mjbrim Exp $

@SET_MAKE@

AR      = @AR@
ARFLAGS = @ARFLAGS@
RANLIB  = @RANLIB@
RM      = @RM@
INSTALL = @INSTALL@
MKDIR_P = mkdir -p
MRNET_STARTUP_METHOD = @MRNET_STARTUP_METHOD@

ROOTDIR = @MRNET_ROOT@
BASEDIR = $(ROOTDIR)/xplat
INCDIR  = $(BASEDIR)/include
SRCDIR  = $(BASEDIR)/src

PLATDIR = @PLATFORM_BUILD@
BINDIR  = $(PLATDIR)/bin
LIBDIR  = $(PLATDIR)/lib
OBJDIR  = $(PLATDIR)/obj/xplat
DEPDIR  = $(PLATDIR)/depends/xplat

prefix      = @prefix@
exec_prefix = @exec_prefix@
ILIBDIR = @libdir@
IINCDIR = @includedir@

xplat_INCDIR = $(INCDIR)/xplat
install_INCDIR = $(IINCDIR)/xplat

VPATH = $(SRCDIR)

C_AS_CPLUSPLUS = @C_AS_CPLUSPLUS@

MAKEDEPENDS = $(ROOTDIR)/conf/makedepends.sh

BUILD_SHARED_LIBS = @BUILDSHARED@

INCFLAGS = -I$(INCDIR) -I$(SRCDIR) -I$(PLATDIR)

COMPILER_TYPE = @COMPILER_TYPE@
CXX = @CXX@
CXXFLAGS = @CXXFLAGS@ $(INCFLAGS)

# Check for older PGI compilers (before 6.0) that require 
# special handling for template libraries
PGI_OLD_TEMPLATES = @PGI_OLD_TEMPLATES@
ifeq ($(COMPILER_TYPE), pgi)
    ifeq ($(PGI_OLD_TEMPLATES), yes)
        CXXFLAGS += --one_instantiation_per_object
    endif
endif

SOFLAGS  = @SOFLAGS@

TARGET    = $(LIBDIR)/libxplat.a
TARGET_SO = $(LIBDIR)/libxplat.so

TARGETS = $(TARGET)
ifeq ($(BUILD_SHARED_LIBS), yes)
    TARGETS += $(TARGET_SO)
endif 

ifeq ($(MRNET_STARTUP_METHOD),cray_xt)
    CXXFLAGS += -Darch_crayxt
endif

XPLAT_SRCS = $(SRCDIR)/Monitor-pthread.C \
             $(SRCDIR)/Mutex-pthread.C \
             $(SRCDIR)/TLSKey-pthread.C \
             $(SRCDIR)/Once-pthread.C \
             $(SRCDIR)/SharedObject-unix.C \
             $(SRCDIR)/NCIO-unix.C \
             $(SRCDIR)/Process.C \
             $(SRCDIR)/Process-unix.C \
             $(SRCDIR)/Thread-pthread.C \
             $(SRCDIR)/Tokenizer.C \
             $(SRCDIR)/NetUtils.C \
             $(SRCDIR)/NetUtils-unix.C \
             $(SRCDIR)/PathUtils-unix.C \
             $(SRCDIR)/SocketUtils-unix.C \
             $(SRCDIR)/Error-unix.C

XPLAT_HEADERS = $(wildcard $(xplat_INCDIR)/*.h)
INSTALL_HEADERS = $(addprefix $(install_INCDIR)/, $(notdir $(XPLAT_HEADERS)))

XPLAT_OBJS = $(addprefix $(OBJDIR)/, $(patsubst %.C,%.o,$(patsubst %.c,%.o,$(notdir $(XPLAT_SRCS)))))
XPLAT_DEPS = $(addprefix $(DEPDIR)/, $(patsubst %.C,%.d,$(patsubst %.c,%.d,$(notdir $(XPLAT_SRCS)))))

all: $(TARGETS)

sharedobj: $(TARGET_SO)

$(TARGET): $(XPLAT_OBJS)
	@echo Archiving `basename $@` ...
	if [ "$(COMPILER_TYPE)" = "pgi" -a "$(PGI_OLD_TEMPLATES)" = "yes" ]; then \
	    $(CXX) $(CXXFLAGS) --prelink_objects $^ ; \
	    $(AR) $(ARFLAGS) $@ $^ Template.dir/*.o ; \
	    $(RM) -r Template.dir ; \
	else \
	    $(AR) $(ARFLAGS) $@ $^ ; \
	fi
	$(RANLIB) $@

$(TARGET_SO): $(XPLAT_OBJS)
	@echo Building `basename $@` ...
	if [ "$(COMPILER_TYPE)" = "pgi" -a "$(PGI_OLD_TEMPLATES)" = "yes" ]; then \
	    $(CXX) $(CXXFLAGS) --prelink_objects $^ ; \
	    $(CXX) $(SOFLAGS) -o $@ $^ Template.dir/*.o ; \
	else \
	    $(CXX) $(SOFLAGS) -o $@ $^ ; \
	fi

install-prep:
	for dir in $(ILIBDIR) $(install_INCDIR) ; do \
	    if [ ! -d $$dir ] ; then \
	        $(MKDIR_P) $$dir ; \
	        chmod 755 $$dir ; \
	    fi \
	done
	if [ ! -x `echo $(INSTALL) | sed 's/ .*$$//'` ] ; then \
	    chmod +x `echo $(INSTALL) | sed 's/ .*$$//'` ; \
	fi

$(INSTALL_HEADERS): $(install_INCDIR)/%: $(xplat_INCDIR)/%
	@echo Installing XPlat header $(<F)
	$(INSTALL) -m 644 $< $(@D)

install: $(TARGETS) install-prep $(INSTALL_HEADERS)
	@echo Installing XPlat libraries
	$(INSTALL) -m 755 $(TARGET) $(ILIBDIR)/
	if [ -f $(TARGET_SO) ] ; then \
            $(INSTALL) -m 755 $(TARGET_SO) $(ILIBDIR)/ ; \
        fi

clean:
	for file in $(XPLAT_DEPS) $(XPLAT_OBJS) $(XPLAT_OBJS:.o=.ii) $(XPLAT_OBJS:.o=.ti) $(TARGETS) ; do \
	    if [ -f $$file ] ; then $(RM) $$file ; fi \
	done

distclean: clean
	for file in `find $(SRCDIR) -name "*~" -print` ; do $(RM) $$file ; done

# pattern rules
@VERBOSEMAKE@
.SUFFIXES:
.SUFFIXES: .c .C .o .d

# add phony target to force serial build of xplat.
# this would not be needed if archive was built differently
# -- and then we could build in parallel
.NOTPARALLEL:

$(DEPDIR)/%.d: %.C
	@echo Building depends file `basename $@` ...
	$(MAKEDEPENDS)  $< $*.o $@ $(INCFLAGS)

$(OBJDIR)/%.o: %.c
	@echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) $(C_AS_CPLUSPLUS) -o $@ -c $<

$(OBJDIR)/%.o: %.C
	@echo Compiling `basename $@` ...
	$(CXX) $(CXXFLAGS) -o $@ -c $<

# make sure file dependencies are used
-include $(XPLAT_DEPS)

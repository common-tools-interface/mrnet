<chapter id="mrnet_api_lightweight"><title>The MRNet Lightweight Back-end C API Reference</title>
<para>
    Standard MRNet relies on the back-end nodes supporting C++ libraries. However,
    we have also created a lightweight backend library with a pure C interface.
    The instantiation process is the same and both methods of process instantiation
    are supported, although the API interface is slightly
    different. Each example in <filename>$MRNET_ROOT/Examples</filename>
    includes a lightweight back-end version.
</para>

    <para>
        In the MRNet lightweight back-end library, the MRNet C++ classes are 
        mimicked for ease of use.
    </para>
    <para>
        With the exception of constructors, API calls in standard MRNet can be translated to
        their lightweight versions according to the following pattern:
        <funcsynopsis>
            <funcprototype>
                <funcdef>return_type <function>class::function_name</function></funcdef>
                <paramdef>param1_type <parameter>param1</parameter></paramdef>
                <varargs></varargs>
            </funcprototype>
        </funcsynopsis>

        translates to:

        <funcsynopsis>
            <funcprototype>
                <funcdef>return_type <function>class_function_name</function></funcdef>
                <paramdef>class <parameter>class_object</parameter></paramdef>
                <paramdef>param1_type <parameter>param1</parameter></paramdef>
                <varargs></varargs>
            </funcprototype>
        </funcsynopsis>
    </para>


    <sect1 id="sect:network_api"><title>Network</title>

        <funcsynopsis>
            <funcprototype>
                <funcdef>Network_t* <function>Network_CreateNetworkBE</function></funcdef>
                <paramdef>int <parameter>argc</parameter></paramdef>
                <paramdef>char ** <parameter>argv</parameter></paramdef>
            </funcprototype>
            <blockquote>
                The back-end constructor method. MRNet automatically passes the 
                necessary information to the back-end process using the program argument
                vector (<varname>argc/argv</varname>) by inserting it after the
                user specified arguments.
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>Network_shutdown_Network</function></funcdef>
                <paramdef>Network_t* <parameter>network</parameter></paramdef>
            </funcprototype>
            <blockquote>
                <function>Network_shutdown_Network</function> is used to tear
                down the MRNet process tree. When this function is called, 
                each node in the tree sends a control message to its
                immediate children informing them of the "shutdown network"
                request, and waits for confirmation. If the node is an
                application back-end, the process will terminate.
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>char* <function>Network_get_LocalHostName</function></funcdef>
                <paramdef>Network_t* <parameter>network</parameter></paramdef>
            </funcprototype>
            <blockquote>
                <function>Network_get_LocalHostName</function> returns the 
                name of the host on which the MRNet process is running.
            </blockquote>
        </funcsynopsis> 

        <funcsynopsis>
            <funcprototype>
                <funcdef>Port <function>Network_get_LocalPort</function></funcdef>
                <paramdef>Network_t* <parameter>network</parameter></paramdef>
            </funcprototype>
            <blockquote>
                <function>Network_get_LocalPort</function> returns the 
                port at which the MRNet process can be contacted.
            </blockquote>
        </funcsynopsis> 
        
        <funcsynopsis>
            <funcprototype>
                <funcdef>Rank <function>Network_get_LocalRank</function></funcdef>
                <paramdef>Network_t* <parameter>network</parameter></paramdef>
            </funcprototype>
            <blockquote>
                <function>Network_get_LocalRank</function> returns the 
                rank of the MRNet process.
            </blockquote>
        </funcsynopsis> 


        <funcsynopsis>
            <funcprototype>
                <funcdef>int <function>Network_recv</function></funcdef>
                <paramdef>Network_t* <parameter>network</parameter></paramdef>
                <paramdef>int <parameter>otag</parameter></paramdef>
                <paramdef>Packet_t* <parameter>packet</parameter></paramdef>
                <paramdef>Stream_t* <parameter>stream</parameter></paramdef>
            </funcprototype>
            <blockquote>
                <para>
                    <function>Network_recv</function> is used to invoke a stream-anonymous 
                    receive operation. Any packet available 
                    (addressed to any stream) will be returned (in roughly FIFO
                    ordering) via the output parameters.
                </para>
                <para>
                    <varname>otag</varname> will be filled in with the integer
                    tag value that was passed by the corresponding 
                    <function>Stream_send</function> operation. 
                    <varname>packet</varname> is the packet that was received. A
                    pointer to the Stream to which the packet was addressed will
                    be returned in <varname>stream</varname>.
                </para>
                <para>
                    In standard MRNet, <function>Network::recv</function> had an
                    additional parameter, <varname>blocking</varname>, to 
                    indicate whether this call should block or return if data is
                    not immediately available. However, because the lightweight
                    back-ends are single-threaded, there is only the blocking 
                    option; therefore this parameter has been omitted.
                </para>
                <para>
                    A return value of -1 indicates an error and 1 indictes a 
                    success.
                </para>
            </blockquote>
        </funcsynopsis>
    </sect1>
    <sect1 id="sect:networktopology_api"><title>NetworkTopology</title>
        <para>
            Instances of NetworkTopology are network specific, so they are 
            created when a Network is instantiated.  MRNet API users should 
            not need to create their own NetworkTopology instances.
        </para>
        
        <funcsynopsis>
            <funcprototype>
                <funcdef>NetworkTopology_t* <function>Network_get_NetworkTopology</function></funcdef>
                <paramdef>Network_t* <parameter>network</parameter></paramdef>
            </funcprototype>
            <blockquote>
                <function>Network_get_NetworkTopology</function> is used to 
                retrieve a pointer to the underlying NetworkTopology instance
                of a Network.
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>Node_t* <function>NetworkTopology_find_Node</function></funcdef>
                <paramdef>NetworkTopology_t* <parameter>net_top</parameter></paramdef>
                <paramdef>Rank <parameter>node_rank</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns a pointer to the tree node with rank 
                equal to <varname>node_rank</varname>, nor NULL if not found.
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>Node_t* <function>NetworkTopology_get_Root</function></funcdef>
                <paramdef>NetworkTopology_t* <parameter>net_top</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns a pointer to the root node of the tree,
                or NULL if not found.
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>char* <function>NetworkTopology_Node_get_HostName</function></funcdef>
                <paramdef>Node_t* <parameter>node</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns a character string identifying the hostname
                of the node.
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>Port <function>NetworkTopology_Node_get_Port</function></funcdef>
                <paramdef>Node_t* <parameter>node</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns the connection port of the tree node.
            </blockquote>
        </funcsynopsis>
        <funcsynopsis>
            <funcprototype>
                <funcdef>Port <function>NetworkTopology_Node_get_Rank</function></funcdef>
                <paramdef>Node_t* <parameter>node</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns the unique rank of the tree node.
            </blockquote>
        </funcsynopsis>
        <funcsynopsis>
            <funcprototype>
                <funcdef>Port <function>NetworkTopology_Node_get_Parent</function></funcdef>
                <paramdef>Node_t* <parameter>node</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns the Rank of the tree node's parent.
            </blockquote>
        </funcsynopsis>

    </sect1>
    <sect1 id="sect:stream_api"><title>Stream</title>
        
        <funcsynopsis>
            <funcprototype>
                <funcdef>Stream_t* <function>Network_get_Stream</function></funcdef>
                <paramdef>Network_t* <parameter>network</parameter></paramdef>
                <paramdef>unsigned int <parameter>iid</parameter></paramdef>
            </funcprototype>
            <blockquote>
                <function>Network_get_Stream</function> returns a pointer
                to the Stream identified by <varname>iid</varname>, or NULL
                on failure.
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>unsigned int <function>Stream_get_Id</function></funcdef>
                <paramdef>Stream_t* <parameter>stream</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns the integer identifier for this Stream.
            </blockquote>
        </funcsynopsis> 

        <funcsynopsis>
            <funcprototype>
                <funcdef>int <function>Stream_send</function></funcdef>
                <paramdef>Stream_t* <parameter>stream</parameter></paramdef>
                <paramdef>int <parameter>tag</parameter></paramdef>
                <paramdef>const char * <parameter>format_string</parameter></paramdef>
                <varargs></varargs>
            </funcprototype>
            <blockquote>
                This method invokdes a data send operation on 
                <varname>stream</varname>. <varname>tag</varname> is an integer
                identifier that is expected to classify the data in the packet
                to be transmitted across the Stream. 
                <varname>format_string</varname> is a format string describing
                the data in the packet (See <xref linkend="format_strings"></xref> 
                for a full description.) On success, 
                <function>Stream_send</function> returns 0; on failure, -1.
                <note>
                    <varname>tag</varname> must have a value greater than or
                    equal to the constant <literal>FirstApplicationTag</literal>
                    defined by MRNet (<filename>#include "mrnet/Types.h"</filename>).
                    Tag values less than <literal>FirstApplicationTag</literal>
                    are reserved for internal MRNet use.
                </note>
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>int <function>Stream_flush</function></funcdef>
                <void></void>
            </funcprototype>
            <blockquote>
                Commits a flush of all packets currently buffered by the stream
                pending an output operation. A successful return value of 1
                indicates that all packets on the calling stream have been 
                passed to the operating system for network transmission.
            </blockquote>
        </funcsynopsis>

    </sect1>
    <sect1 id="sect:packet_api"><title>Packet</title>
        <para>
            A Packet encapsulates a chunk of formatted data send on a Stream.
            Packets are created using a format string (e.g. 
            <literal>"%s %d"</literal> describes a null-terminated string
            followed by a 32-bit integer, and the Packet is said to contain
            2 data elements). MRNet front-end and back-end processes do not
            create instances of Packet; instead they are automatically produced
            from the formatted data passed to <function>Stream_send</function>.
            <xref linkend="format_strings"></xref> contains the full listing of
            data types that can be sent in a Packet.
        </para>
        <para>
            When receiving a Packet via <function>Network_recv</function>, the 
            Packet instance is stored within the Packet_t object. Note that
            standard MRNet makes use of the PacketPtr object, which is based on
            the Boost library shared_ptr class. However, in the lightweight
            back-end library, pointers to Packet_t objects are used instead.
        </para>

        <funcsynopsis>
            <funcprototype>
                <funcdef>int <function>Packet_get_Tag</function></funcdef>
                <paramdef>Packet_t* <parameter>packet</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns the integer tag associated with <varname>packet</varname>.
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>unsigned short <function>Packet_get_StreamId</function></funcdef>
                <paramdef>Packet_t* <parameter>packet</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns the stream id associated with <varname>packet</varname>
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>char* <function>Packet_get_FormatString</function></funcdef>
                <paramdef>Packet_t* <parameter>packet</parameter></paramdef>
            </funcprototype>
            <blockquote>
                This method returns the character string specifying the data
                format of the <varname>packet</varname>
            </blockquote>
        </funcsynopsis>

        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>Packet_unpack</function></funcdef>
                <paramdef>Packet_t* <parameter>packet</parameter></paramdef>
                <paramdef>const char * <parameter>format_string</parameter></paramdef>
                <varargs></varargs>
            </funcprototype>
            <blockquote>
                This method extracts data contained within <varname>packet</varname>
                according to
                the <varname>format_string</varname>, which must match that of
                the Packet. The function arguments following 
                <varname>format_string</varname> should be pointers to the 
                appropriate types of each data item. For string and array data
                types, new memory bufffers to hold the data will be allocated
                using <function>malloc</function>, and it is the user's
                responsibility to <function>free</function> these strings and
                arrays.
            </blockquote>
        </funcsynopsis>
    </sect1>

</chapter>
